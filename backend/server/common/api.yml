openapi: 3.0.1
info:
  title: Fuga Music API
  description: Product management system for music catalog
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: Products
    description: Music product management endpoints
  - name: Authentication
    description: User authentication endpoints
  - name: Health
    description: System health monitoring
  - name: Specification
    description: The swagger API specification
paths:
  /health:
    get:
      tags:
        - Health
      description: Check system health status
      responses:
        200:
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    example: 3600
                  database:
                    type: object
                    properties:
                      status:
                        type: string
                        example: connected
                      responseTime:
                        type: string
                        example: "15ms"
        503:
          description: System is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: unhealthy
                  timestamp:
                    type: string
                    format: date-time
  /products:
    get:
      tags:
        - Products
      description: Fetch all music products
      parameters:
        - name: search
          in: query
          description: Search for products by name or artist
          required: false
          schema:
            type: string
            example: "jazz"
        - name: limit
          in: query
          description: Number of products to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 10
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
      responses:
        200:
          description: Return all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        4XX:
          description: Products not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Products
      description: Create a new music product
      requestBody:
        description: Product data with optional cover art upload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBody'
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                artist:
                  type: string
                type:
                  type: string
                price:
                  type: number
                  format: float
                releaseDate:
                  type: string
                  format: date
                coverArt:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        4XX:
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/upload:
    post:
      tags:
        - Products
      description: Create a new music product with file upload
      requestBody:
        description: Product data with cover art upload
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                artist:
                  type: string
                type:
                  type: string
                price:
                  type: string
                releaseDate:
                  type: string
                coverArt:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        4XX:
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    get:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: The id of the product to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Return the product with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        4XX:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Products
      description: Update an existing music product
      parameters:
        - name: id
          in: path
          description: The id of the product to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated product data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBody'
        required: true
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        4XX:
          description: Invalid product data or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Products
      description: Delete a music product
      parameters:
        - name: id
          in: path
          description: The id of the product to delete
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Product deleted successfully
        4XX:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}/upload:
    put:
      tags:
        - Products
      description: Update an existing music product with file upload
      parameters:
        - name: id
          in: path
          description: The id of the product to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated product data with cover art upload
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                artist:
                  type: string
                type:
                  type: string
                price:
                  type: string
                releaseDate:
                  type: string
                coverArt:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        4XX:
          description: Invalid product data or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
          content: {}
  /auth/register:
    post:
      tags:
        - Authentication
      description: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
      responses:
        201:
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      tags:
        - Authentication
      description: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/me:
    get:
      tags:
        - Authentication
      description: Get user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      additionalProperties: true

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        created_at:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Midnight Jazz Sessions
        artist:
          type: string
          example: The Blue Note Collective
        type:
          type: string
          example: Album
        price:
          type: number
          format: float
          example: 12.99
        releaseDate:
          type: string
          format: date
          example: "2024-03-15"
        coverArt:
          type: string
          example: "/images/midnight-jazz.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2024-08-15T19:00:00.000Z"

    ProductBody:
      title: Product
      required:
        - name
        - artist
      type: object
      properties:
        name:
          type: string
          example: Electric Dreams
        artist:
          type: string
          example: Neon Pulse
        type:
          type: string
          example: Single
        price:
          type: number
          format: float
          example: 2.99
        releaseDate:
          type: string
          format: date
          example: "2024-08-01"
        coverArt:
          type: string
          example: "/images/electric-dreams.jpg"
