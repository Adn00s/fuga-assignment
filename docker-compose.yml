version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fuga-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-fuga_music}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-fuga_music}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fuga-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fuga-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${API_PORT:-3000}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-fuga_music}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    ports:
      - "${API_PORT:-3000}:${API_PORT:-3000}"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fuga-network
    command: npm run dev

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: fuga-frontend
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   depends_on:
  #     - backend
  #   networks:
  #     - fuga-network

volumes:
  postgres_data:
    driver: local

networks:
  fuga-network:
    driver: bridge
